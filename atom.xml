<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cris的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zc-cris.github.io/"/>
  <updated>2019-10-12T08:44:46.072Z</updated>
  <id>https://zc-cris.github.io/</id>
  
  <author>
    <name>Cris</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="https://zc-cris.github.io/archives/d87f7e0c.html"/>
    <id>https://zc-cris.github.io/archives/d87f7e0c.html</id>
    <published>2019-10-12T08:43:22.000Z</published>
    <updated>2019-10-12T08:44:46.072Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="技术文" scheme="https://zc-cris.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87/"/>
    
      <category term="Java" scheme="https://zc-cris.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87/Java/"/>
    
    
      <category term="测试" scheme="https://zc-cris.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="test" scheme="https://zc-cris.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Deepin 搭建博客全记录</title>
    <link href="https://zc-cris.github.io/archives/118474ee.html"/>
    <id>https://zc-cris.github.io/archives/118474ee.html</id>
    <published>2019-10-11T13:07:15.000Z</published>
    <updated>2019-10-12T10:36:25.430Z</updated>
    
    <content type="html"><![CDATA[<img src="/archives/118474ee/37518462a32b009479b18890c113e3da.jpg" alt="37518462a32b009479b18890c113e3da" style="zoom:100%;"><p>这应该是网上可以搜索到的最全的在 <code>Deepin</code> 下搭建博客的教程了～<a id="more"></a></p><h2 id="1-下载-Node-js"><a href="#1-下载-Node-js" class="headerlink" title="1. 下载 Node.js"></a>1. 下载 Node.js</h2><p>如果根据网上的大部分参考文章，<code>Deepin</code> 可以成功安装 <code>Node.js</code>，但是无法安装 <code>npm</code>，会出现以下错误</p><p><img src="/archives/118474ee/1570355853363.png" alt="1570355853363"></p><p>根据这篇<a href="http://vksec.com/2019/08/27/78_ubuntu%E4%BD%BF%E7%94%A8npm%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/" rel="external nofollow noopener noreferrer" target="_blank">参考文章</a></p><p>我们直接去 <code>Node.js</code> 的<a href="https://nodejs.org/en/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>，下载安装包，建议下载 <code>LTS</code>（长期支持版本），然后通过如下命令解压到指定的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ tar -xvJf node-v10.16.3-linux-x64.tar.xz -C ../software/</span><br></pre></td></tr></table></figure><p>如果此时发现输入 <code>node</code> 命令无法找到，则需要我们手动建立命令链接如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ sudo ln -s /home/cris/software/node-v10.16.3-linux-x64/bin/node  /usr/local/bin/node</span><br><span class="line"></span><br><span class="line">cris@cris-pc:~/Documents/blog$ sudo ln -s /home/cris/software/node-v10.16.3-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure><p>然后我们可以通过 <code>node -v</code> 和 <code>npm -v</code> 命令来查看版本信息</p><p><img src="/archives/118474ee/1570356552831.png" alt="1570356552831"></p><p>接着我们需要手动的安装 <code>cnpm</code>，为了下载速度更快</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>然后等待安装完成即可</p><p>如果输入 <code>cnpm</code> 还是无法找到该命令，我们同样可以创建一个链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ sudo ln -s /home/cris/software/node-v10.16.3-linux-x64/bin/cnpm  /usr/local/bin/cnpm</span><br></pre></td></tr></table></figure><p>然后输入 <code>cnpm -v</code> 命令可以发现安装成功</p><h2 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2. 安装 Git"></a>2. 安装 Git</h2><p>接着安装 <code>Git</code> ，提供版本控制功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git -y</span><br></pre></td></tr></table></figure><p><img src="/archives/118474ee/1570357050659.png" alt="1570357050659"></p><p>如上表示安装成功</p><p>设置自己的 <code>GitHub</code> 用户名和邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~$ git config --global user.email "xxx"</span><br><span class="line">cris@cris-pc:~$ git config --global user.name "xx"</span><br></pre></td></tr></table></figure><h2 id="3-安装-Hexo"><a href="#3-安装-Hexo" class="headerlink" title="3. 安装 Hexo"></a>3. 安装 Hexo</h2><p>接着我们安装 <code>Hexo</code> 这个博客引擎</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ sudo cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果输入 <code>hexo -v</code> 还是显示没有命令，我们继续创建命令链接</p><p><img src="/archives/118474ee/1570357306686.png" alt="1570357306686"></p><p>然后输入命令，出现以下界面表示 <code>Hexo</code> 安装成功</p><p><img src="/archives/118474ee/1570357410945.png" alt="1570357410945"></p><p>建立一个空的文件夹，<code>blog</code> 目录，然后进入 <code>blog</code> 目录</p><p>使用以下命令初始化我们的博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ sudo hexo init</span><br></pre></td></tr></table></figure><p>然后我们可以发现 <code>blog</code> 目录下多了很多文件</p><p><img src="/archives/118474ee/1570357602534.png" alt="1570357602534"></p><p>测验 <code>Hexo</code> 启动，输入以下命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ hexo s</span><br></pre></td></tr></table></figure><p>然后在浏览器输入 <a href="http://localhost:4000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000/</a> ，出现以下界面表示博客本地搭建成功</p><img src="/archives/118474ee/1570357827588.png" alt="1570357827588" style="zoom:50%;"><p>可以通过 <code>hexo n 博客名</code>  来生成对应的博客，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ hexo n 我们</span><br></pre></td></tr></table></figure><p>进入到专门写博客的文件夹</p><p><img src="/archives/118474ee/1570358046030.png" alt="1570358046030"></p><p>发现 <code>Hexo</code> 自动生成了后缀名为 <code>.md</code> 的博客文件</p><p>然后退回 <code>blog</code> 目录，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>重新打开 <a href="http://localhost:4000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000/</a> ，可以发现一篇名为 <code>我们</code> 的新博客又生成了～</p><p>如果想要生成博客的同时，对应生成同名的文件夹，可以修改 <code>blog</code> 目录下的 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post_asset_folder: false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="4-部署到-GitHub-服务器"><a href="#4-部署到-GitHub-服务器" class="headerlink" title="4. 部署到 GitHub 服务器"></a>4. 部署到 GitHub 服务器</h2><p>进入我们的 <code>GitHub</code> 账号，创建一个仓库</p><p><img src="/archives/118474ee/1570358497170.png" alt="1570358497170"></p><p>然后在 <code>blog</code> 目录下安装一个远程部署插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ sudo cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>紧接着修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ sudo vim _config.yml</span><br></pre></td></tr></table></figure><p>添加内容如下</p><p><img src="/archives/118474ee/1570358816912.png" alt="1570358816912"></p><p>保存退出</p><p>然后直接使用 <code>hexo d</code> 命令部署即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ sudo hexo d</span><br></pre></td></tr></table></figure><p>然后输入我们的仓库名，出现以下界面表示部署成功</p><p><img src="/archives/118474ee/1570361680661.png" alt="1570361680661"></p><h2 id="5-使用-Git-分支保存-Hexo-博客源码到-GitHub"><a href="#5-使用-Git-分支保存-Hexo-博客源码到-GitHub" class="headerlink" title="5. 使用 Git 分支保存 Hexo 博客源码到 GitHub"></a>5. 使用 Git 分支保存 Hexo 博客源码到 GitHub</h2><p>因为我们的博客配置文件和 <code>.md</code> 源文件最终都是不会被发布到 <code>GitHub</code> 的远程仓库，如果我们换电脑或者当前电脑出现问题，那么就得重头再来配置博客环境，十分麻烦，所以这里我们参考<a href="http://www.yangbing.club/2019/06/29/save-hexo-source-post-with-git-branch/" rel="external nofollow noopener noreferrer" target="_blank">这篇博客</a>，利用 <code>GitHub</code> 的分支来保存我们的博客配置文件和 <code>.md</code> 源文件</p><p>根据参考博客，我们在 <code>GitHub</code> 远程仓库创建另外一个分支 <code>resource</code>，并且将其设置为默认分支</p><p>但是再将本地博客目录和远程仓库关联的时候，即执行以下命令，你会发现报错了～～～</p><p><img src="/archives/118474ee/1570444850834.png" alt="1570444850834"></p><p>这是因为我们的本地博客目录还不是一个 <code>git</code> 仓库，所以需要初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ git init</span><br><span class="line">已初始化空的 Git 仓库于 /home/cris/Documents/blog/.git/</span><br></pre></td></tr></table></figure><p>然后和我们的远程仓库关联起来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ git remote add origin https://github.com/zc-cris/zc-cris.github.io.git</span><br></pre></td></tr></table></figure><p>此时我们处在默认的本地 <code>master</code> 分支上</p><p><img src="/archives/118474ee/1570445003364.png" alt="1570445003364"></p><p><strong>注意：</strong></p><p>此时我们本地的博客目录在初始化成为 <code>git</code> 仓库之前是有内容的，但是这些内容我们需要提交到本地的 <code>master</code> 分支上（这和传统的先初始化本地 <code>git</code> 仓库，然后在分支上写内容是相反的）</p><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ git add .</span><br><span class="line">cris@cris-pc:~/Documents/blog$ git commit -m 'hexo resource'</span><br></pre></td></tr></table></figure><p>然后发现本地 <code>master</code> 分支都保存了我们之前的所有内容</p><p><img src="/archives/118474ee/1570445355050.png" alt="1570445355050"></p><p>建议从本地的 <code>master</code> 分支新建一个本地 <code>resource</code> 分支，和我们远程仓库的 <code>resource</code> 分支对应起来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ git checkout b resource</span><br></pre></td></tr></table></figure><p>查看当前的本地分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ git branch </span><br><span class="line">  master</span><br><span class="line">* resource</span><br></pre></td></tr></table></figure><p>发现我们正处于本地的 <code>resource</code> 分支</p><p>如果我们此时就想和远程仓库的 <code>resource</code> 分支关联</p><p><img src="/archives/118474ee/1570445564611.png" alt="1570445564611"></p><p>因为我们还没有远程仓库的分支信息，所以需要从远程仓库获取 <code>resource</code> 分支的信息</p><p><img src="/archives/118474ee/1570445629799.png" alt="1570445629799"></p><p>一定要注意 <code>warning</code> 信息，我们的远程仓库的 <code>resource</code> 分支和我们本地仓库的 <code>resource</code> 分支是没有一点关联的现在！</p><p>可以查看当前的本地所有分支信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ git branch -a</span><br><span class="line">  master</span><br><span class="line">* resource</span><br><span class="line">  remotes/origin/resource</span><br></pre></td></tr></table></figure><p>然后我们需要设置本地的 <code>resource</code> 分支和远程的 <code>resource</code> 分支（<code>remotes/origin/resource</code>）关联，<a href="https://cloud.tencent.com/developer/article/1423150" rel="external nofollow noopener noreferrer" target="_blank">参考博客</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ git branch -u origin/resource</span><br><span class="line">分支 resource 设置为跟踪来自 origin 的远程分支 resource。</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ git branch -vv</span><br><span class="line">  master   85b4421 hexo resource</span><br><span class="line">* resource 85b4421 [origin/resource：领先 1，落后 2] hexo resource</span><br></pre></td></tr></table></figure><p>如果我们此时使用 <code>git status</code> 命令，会发现</p><p><img src="/archives/118474ee/1570445888740.png" alt="1570445888740"></p><p>为什么会这样呢？</p><blockquote><p>因为我们远程仓库的 <code>resource</code> 分支其实是来自远程仓库的 <code>master</code> 分支，而此时远程仓库的 <code>master</code> 分支内容都是由我们第一次的 <code>hexo d</code> 命令推送到远程仓库自动创建的（推送过去的都是通过 <code>hexo g</code> 命令处理后的静态资源文件）</p><p>而本地的 <code>resource</code> 分支来自于本地的 <code>master</code> 分支，而我们使用 <code>git init</code> 命令初始化以后，生成了一些新的文件，以及我们的<code>hexo</code> 配置文件和 <code>.md</code> 文件统一通过 <code>git add .</code> 这个命令保存到默认的 <code>master</code> 分支，所以本地的 <code>resource</code> 分支和远程的 <code>resource</code> 分支没有任何相交的地方，并且提交的版本号也没有任何重叠的地方，虽然我们逻辑上可以把这两个分支关联在一起，但是要注意实际上这两个分支可以看做是不同的分支</p></blockquote><p>所以如果我们要推送本地的 <code>resource</code> 分支要远程仓库的 <code>resource</code> 分支，就会报错！</p><p><img src="/archives/118474ee/1570446573165.png" alt="1570446573165"></p><p>解决方式很简单，合并当前本地的 <code>resource</code> 分支和从远程仓库拉取下来的 <code>resource</code> 分支即可，但是如果我们使用 <code>merge</code> 命令，<a href="https://www.cnblogs.com/Yemilice/p/6217201.html" rel="external nofollow noopener noreferrer" target="_blank">参考博客</a></p><p><img src="/archives/118474ee/1570446633299.png" alt="1570446633299"></p><p>十分恼火！参考<a href="https://blog.csdn.net/u012300744/article/details/80264807" rel="external nofollow noopener noreferrer" target="_blank">这篇博客</a></p><p>我们使用如下命令，强行合并</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ git merge origin/resource --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>我们会进入一个文件，填写 <code>merge</code> 信息，参照上面的博客保存退出即可开始如下合并</p><p><img src="/archives/118474ee/1570446834623.png" alt="1570446834623"></p><p>然后我们查看分支信息</p><p><img src="/archives/118474ee/1570446895916.png" alt="1570446895916"></p><p>发现合并成功～</p><p>直接使用 git push 推到远程仓库的 <code>resource</code> 分支即可</p><p><img src="/archives/118474ee/1570446946589.png" alt="1570446946589"></p><p>可以通过远程仓库验证</p><p>这是 <code>master</code> 分支</p><p><img src="/archives/118474ee/1570447021331.png" alt="1570447021331"></p><p>这是 <code>resource</code> 分支</p><p><img src="/archives/118474ee/1570447087976.png" alt="1570447087976"></p><p>那么我们可以通过本地的博客目录修改博客配置文件，写博客，这些文件都可以通过 <code>git</code> 推送到远程的 <code>resource</code> 分支上，后续更换电脑或者我们当前电脑除了问题都不用怕了 O(∩_∩)O~</p><p>而我们发布到博客的静态资源则是通过 <code>hexo d</code> 这个命令自动推送到远程仓库的 <code>master</code> 分支，对外展示</p><p>通过一个远程仓库的 <code>master</code> 分支和 <code>resource</code> 分支实现了博客发布和源文件保存两个功能！</p><blockquote><p>这个流程花了我大概一天的时间，参考的第一篇博客给了我灵感，但是写的并不好，一些坑都没说出来，导致我又花了很多时间去解决，去解释</p><p>庆幸的是，我对 git 的使用和理解又加深了好多 O(∩_∩)O</p></blockquote><p><strong>ps：如果在 resource 分支下，无法通过 hexo d 命令推送博客文章，出现如下错误</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ hexo d</span><br><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure><p>那么在 <code>resource</code> 这个分支下重新安装 <code>hexo-deployer-git</code> 这个插件即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>也就是说，我们可以在本地<code>resource</code> 分支下，通过执行 <code>hexo d</code> 发布博客到自己的网站（推送博客到远程仓库的 <code>master</code> 分支），也可以通过 <code>git push</code> 推送最新的配置到远程仓库的 <code>resource</code> 分支</p><h2 id="6-配置-yilia-主题"><a href="#6-配置-yilia-主题" class="headerlink" title="6. 配置 yilia 主题"></a>6. 配置 yilia 主题</h2><p><a href="https://tding.top/archives/9a232bbe.html" rel="external nofollow noopener noreferrer" target="_blank">以下配置全程参考博客</a></p><p>下载完毕 <code>yilia</code> 主题后，需要手动设置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ de _config.yml</span><br></pre></td></tr></table></figure><p><code>blog</code> 是我们的本地博客目录，<code>de</code> 是我设置的 <code>deepin</code> 别名，在 <code>~/.bash_aliases</code> 里写入即可，通过 <code>de</code> 这个别名调用 <code>deepin</code> 自带的编辑器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias de='dedit'</span><br></pre></td></tr></table></figure><p>修改如下</p><img src="/archives/118474ee/1570447870626.png" alt="1570447870626" style="zoom:50%;"><p>我们可以通过以下命令验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ hexo s -g</span><br></pre></td></tr></table></figure><img src="/archives/118474ee/1570447938405.png" alt="1570447938405" style="zoom:50%;"><p>然后推送到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ hexo d</span><br></pre></td></tr></table></figure><img src="/archives/118474ee/1570448012523.png" alt="1570448012523" style="zoom:50%;"><p>无论是本地还是远程仓库，都修改成功！</p><p><strong>ps：记得推送最新的 resource 分支哦！</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ git branch </span><br><span class="line">  master</span><br><span class="line">* resource</span><br><span class="line">cris@cris-pc:~/Documents/blog$ git status</span><br><span class="line">位于分支 resource</span><br><span class="line">您的分支与上游分支 'origin/resource' 一致。</span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 "git add &lt;文件&gt;..." 更新要提交的内容）</span><br><span class="line">  （使用 "git checkout -- &lt;文件&gt;..." 丢弃工作区的改动）</span><br><span class="line"></span><br><span class="line">修改：     _config.yml</span><br><span class="line"></span><br><span class="line">未跟踪的文件:</span><br><span class="line">  （使用 "git add &lt;文件&gt;..." 以包含要提交的内容）</span><br><span class="line"></span><br><span class="line">themes/yilia/</span><br><span class="line"></span><br><span class="line">修改尚未加入提交（使用 "git add" 和/或 "git commit -a"）</span><br><span class="line">cris@cris-pc:~/Documents/blog$ git add .</span><br><span class="line">cris@cris-pc:~/Documents/blog$ git status </span><br><span class="line">位于分支 resource</span><br><span class="line">您的分支与上游分支 'origin/resource' 一致。</span><br><span class="line">要提交的变更：</span><br><span class="line">  （使用 "git reset HEAD &lt;文件&gt;..." 以取消暂存）</span><br><span class="line"></span><br><span class="line">修改：     _config.yml</span><br><span class="line">新文件：   themes/yilia</span><br><span class="line"></span><br><span class="line">cris@cris-pc:~/Documents/blog$ git commit -m 'add yilia theme'</span><br><span class="line">[resource 49c1ea5] add yilia theme</span><br><span class="line"> 2 files changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"> create mode 160000 themes/yilia</span><br><span class="line">cris@cris-pc:~/Documents/blog$ git push </span><br><span class="line">对象计数中: 4, 完成.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">压缩对象中: 100% (4/4), 完成.</span><br><span class="line">写入对象中: 100% (4/4), 390 bytes | 0 bytes/s, 完成.</span><br><span class="line">Total 4 (delta 2), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (2/2), completed with 2 local objects.</span><br><span class="line">To https://github.com/zc-cris/zc-cris.github.io.git</span><br><span class="line">   144e2a5..49c1ea5  resource -&gt; resource</span><br><span class="line">cris@cris-pc:~/Documents/blog$</span><br></pre></td></tr></table></figure><p>然后我们验证远程仓库的 <code>resource</code> 分支上同样有了 <code>yilia</code> 的主题</p><p><img src="/archives/118474ee/1570846801012.png" alt="1570846801012"></p><p>接下来就是按照参考博客一点点配置即可，有几个坑我这里都写出来了</p><h3 id="6-1-设置权限"><a href="#6-1-设置权限" class="headerlink" title="6.1 设置权限"></a>6.1 设置权限</h3><p>如果在操作本地的博客目录时，总是要求 <code>root</code> 权限，建议将本地博客目录的权限修改为当前普通用户可以写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents$ sudo chmod -R o+w blog/</span><br></pre></td></tr></table></figure><p>或者修改为 <code>sudo chmod -R 777 blog/</code> 也可以，但是不推荐，甚至可以赋予当前普通用户 <code>root</code> 权限，仍然不推荐</p><h3 id="6-2-GitHub-免密"><a href="#6-2-GitHub-免密" class="headerlink" title="6.2 GitHub 免密"></a>6.2 GitHub 免密</h3><p>如果使用 <code>hexo d</code> 或者 <code>git push</code> 老是要求输入 <code>git</code> 账号和密码，可以通过以下方式一次性解决</p><p>网上大部分是通过 <code>ssh</code> 秘钥这种方式实现免密</p><p>我们还可以通过 <code>http</code> 这种方式，如下</p><p>在 <code>~/</code> 目录下生成一个  <code>.git-credentials</code> 文件，然后在这个文件中输入以下内容</p><p><img src="/archives/118474ee/1570461235971.png" alt="1570461235971"></p><p><code>zc-cris</code>为自己的 <code>GitHub</code> 用户名，马赛克部分就是自己的 <code>GitHub</code> 密码，然后执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>即可，这个命令会给 <code>～/.gitconfig</code> 文件生成以下内容，用于保存我们的 <code>GitHub</code> 用户名和密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[credential]</span><br><span class="line">helper = store</span><br></pre></td></tr></table></figure><h3 id="6-3-爬坑细节"><a href="#6-3-爬坑细节" class="headerlink" title="6.3 爬坑细节"></a>6.3 爬坑细节</h3><ul><li><p>涉及到 <code>hexo</code> 的命令，一般都是在博客主目录，也就是我这里的 <code>blog</code> 目录下，例如 <code>hexo g</code>，<code>hexo s</code> 命令等</p></li><li><p><code>blog</code> 目录下有 <code>_config.yml</code> 文件，<code>yilia</code> 目录下同样有 <code>_config.yml</code> 文件，配置的时候千万不要搞混了～</p></li><li><p>修改配置的时候，能粘贴就不要自己手敲，只需要关注粘贴对地方以及自己需要改的小部分配置即可（例如自己的 <code>GitHub</code> 地址，自己的头像图片等等）</p></li><li><p>注意根据原博主的配置，我们新建博文的时候，也就是 <code>.md</code> 文件的时候，<code>.md</code> 文件最上面的 <code>front</code> 代码块可以按自己需要修改</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">title: HTML入门笔记</span><br><span class="line"></span><br><span class="line">copyright: true</span><br><span class="line">date: 2018-11-23 21:07:15</span><br><span class="line"></span><br><span class="line">toc: true</span><br><span class="line">tags: [HTML,前端]</span><br><span class="line">categories: [前端,HTML]</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>在设置头像和图标的时候，头像指的是你的首页自己的头像，图标指的是你的网站标签前面的那个小图标</p><p>  示意图如下：</p>  <img src="/archives/118474ee/1570849306425.png" alt="1570849306425" style="zoom:50%;"></li></ul><p>推荐使用这个<a href="https://www.favicon-generator.org/" rel="external nofollow noopener noreferrer" target="_blank">网站</a>生成你的小图标，建议使用 <code>32*32</code> 大小的图标</p><ul><li><p>评论部分，<code>Hexo-Yilia</code> 代码块行号显示错乱问题，<code>Hexo</code> 增加谷歌统计，添加相册 这几部分我没有做，比较麻烦，也感觉没有必要</p></li><li><p>安装 <code>hexo-wordcount</code> 的时候，原博主的命令有误，需要使用以下命令（在 <code>blog</code> 目录下）</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i install hexo-wordcount --save</span><br></pre></td></tr></table></figure></li><li><p>博客主页修改成自己的名字以及修改网页标签的<code>title</code>（修改 <code>blog</code> 目录下的 <code>_config.yml</code>）</p><p>  <img src="/archives/118474ee/1570850398364.png" alt="1570850398364"></p><p>  然后直接输入以下命令，同时 <code>generate</code> 生成 和 <code>start</code> 启动</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ hexo s -g</span><br></pre></td></tr></table></figure>  <img src="/archives/118474ee/1570850559167.png" alt="1570850559167" style="zoom:50%;"></li></ul><p>鼠标移动到网页的标签上，就会自动显示你的 <code>title</code></p><ul><li>在修改自己博客的 <code>url</code> 地址的时候（11.4）,一定要修改成自己博客的地址，而不是远程仓库的地址，否则添加 <code>sitemap</code> 那一步怎么都无法成功​​ ╮(╯▽╰)╭</li><li>建议每完成一个大章节的操作后，就通过 git 保存一下，然后 <code>hexo s -g</code> 命令启动查看一下效果，否则一口气做到后面，出现错误就完蛋了 /(ㄒoㄒ)/~~</li><li>有时候出现修改了配置但是没有起作用的话，可以先使用 <code>hexo clean</code> 命令，再使用 <code>hexo s -g</code> 命令</li></ul><h3 id="6-4-关于图片无法显示的情况解决"><a href="#6-4-关于图片无法显示的情况解决" class="headerlink" title="6.4 关于图片无法显示的情况解决"></a>6.4 关于图片无法显示的情况解决</h3><p>如果根据原博主博客一路做下来，基本配置都没有问题了，但是还有一个最严重的问题，那就是我们往 <code>.md</code> 文件插入图片后，通过 <code>hexo s -g</code> 命令生成的博客是无法查看图片的</p><p>所以我们还需要下载一个插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>然后使用 <code>hexo clean</code> 清理一下缓存，再使用 <code>hexo s -g</code> 命令即可</p><p>之前写博客，都是使用的图床工具，现在搭建好了自己的博客后，就可以直接舍弃图床工具，直接将图片复制粘贴到 <code>.md</code> 文件即可，我这里使用 <code>Typora</code> 来编写博客</p><img src="/archives/118474ee/1570857695173.png" alt="1570857695173" style="zoom:50%;"><p>然后 <code>hexo s -g</code> 命令生成对应的博客</p><img src="/archives/118474ee/1570857806784.png" alt="1570857806784" style="zoom:50%;"><p>点击博客，进入到博客页同样可以显示图片</p><img src="/archives/118474ee/1570857858951.png" alt="1570857858951" style="zoom:50%;"><p>点击图片一样有放大效果</p><h3 id="6-5-所有的配置完成后"><a href="#6-5-所有的配置完成后" class="headerlink" title="6.5 所有的配置完成后"></a>6.5 所有的配置完成后</h3><p>记得推送完成后的配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ git add .</span><br><span class="line">cris@cris-pc:~/Documents/blog$ git commit -m'update setting files'</span><br><span class="line">[resource e92c2dd] update setting files</span><br><span class="line"> 8 files changed, 612 insertions(+), 3 deletions(-)</span><br><span class="line"> create mode 100644 source/_posts/test.md</span><br><span class="line"> create mode 100644 source/_posts/test/1570857068343.png</span><br><span class="line"> create mode 100644 source/_posts/test2.md</span><br><span class="line"> create mode 100644 source/_posts/test2/1570858176121.png</span><br><span class="line">cris@cris-pc:~/Documents/blog$ git push</span><br><span class="line">对象计数中: 14, 完成.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">压缩对象中: 100% (12/12), 完成.</span><br><span class="line">写入对象中: 100% (14/14), 40.75 KiB | 0 bytes/s, 完成.</span><br><span class="line">Total 14 (delta 5), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (5/5), completed with 5 local objects.</span><br><span class="line">To https://github.com/zc-cris/zc-cris.github.io.git</span><br><span class="line">   49cee66..e92c2dd  resource -&gt; resource</span><br></pre></td></tr></table></figure><p>本地显示无误后，发布博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cris@cris-pc:~/Documents/blog$ hexo d</span><br></pre></td></tr></table></figure><p>查看我们的博客地址</p><img src="/archives/118474ee/1570858987511.png" alt="1570858987511" style="zoom:50%;"><p>well done！^_^</p><h3 id="6-6-写博客的步骤总结"><a href="#6-6-写博客的步骤总结" class="headerlink" title="6.6 写博客的步骤总结"></a>6.6 写博客的步骤总结</h3><ol><li>在 <code>blog</code> 目录下执行<code>hexo n &quot;myBlog&quot;</code>，在 <code>source/_post</code> 文件夹下生成一个 <code>myBlog.md</code>的文件以及同名文件夹</li><li>使用 <code>Typora</code> 编辑<code>myBlog.md</code>，书写自己的博客内容，如果有图片直接插入即可（<code>Typora</code> 会将图片复制到同名文件夹下面），写完之后建议导出为 <code>PDF</code> 做个备份</li><li>执行 <code>hexo g</code>生成静态页面；执行 <code>hexo s</code> 启动本地服务器预览效果（可以直接 <code>hexo s -g</code>）；执行 <code>hexo d</code> 将文章部署到<code>GitHub</code>实现真正的网络博客，如果 <code>hexo d</code> 不起作用那么就先执行一遍 <code>hexo clean</code>；如果修改了配置文件，记得执行 6.5 小节的命令哦～</li></ol><p>不需要图床，简单方便，还可以使用 <code>Typora</code> 这么好用的 <code>Markdown</code> 工具，几个命令发布博客，几个命令随时保存博客配置文件，还有比这更爽的事吗？(<em>^__^</em>) 嘻嘻……</p><h2 id="7-yilia-主题优化（持续更新）"><a href="#7-yilia-主题优化（持续更新）" class="headerlink" title="7. yilia 主题优化（持续更新）"></a>7. yilia 主题优化（持续更新）</h2><h3 id="7-1-显示博客前几行"><a href="#7-1-显示博客前几行" class="headerlink" title="7.1 显示博客前几行"></a>7.1 显示博客前几行</h3><p>默认情况下，博客主页的博客会全部显示完，而实际上我们的主页只需要显示每篇博客的前几行即可，在你写 <code>md</code> 文章的时候，可以在内容中加上 <code>&lt;!--more--&gt;</code>，这样首页和列表页展示的文章内容就是 <code>&lt;!--more--&gt;</code> 之前的文字，而之后的内容就不会在首页显示了</p><blockquote><p>进入<code>theme</code>目录，打开<code>yilia</code>目录下的<code>_config.yml</code>文件</p><p>将 <code>excerpt_link：</code>之后的<code>more</code>单词换成空格</p></blockquote><p><em>小技巧：可以在首页显示我们每篇博客的顶部大图</em></p><h3 id="7-2-自动-front-模板"><a href="#7-2-自动-front-模板" class="headerlink" title="7.2 自动 front 模板"></a>7.2 自动 front 模板</h3><p>当我们通过 <code>hexo new 博客名</code> 的命令创建一篇博客的时候，我们会发现博客前面的 <code>front</code> 代码模块是固定的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>那么每次写博客，我们还要手动去写分类，写 <code>tag</code>，实在太麻烦，其实可以通过修改模板的方式来让 <code>Hexo</code> 自动为我们生成想要的 <code>front</code> 代码，默认是根据 <code>scaffolds/post.md</code> 来生成的，所以我们直接修改这个 <code>post.md</code> 文件即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">copyright:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">declare:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet"> -</span> </span><br><span class="line"><span class="bullet"> -</span> </span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">技术文</span></span><br><span class="line"><span class="bullet"> -</span> </span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>然后我们可以新建一篇博客试试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new "test"</span><br></pre></td></tr></table></figure><img src="/archives/118474ee/1570870493089.png" alt="1570870493089" style="zoom:50%;"><p>本地生成并启动</p><img src="/archives/118474ee/1570870535646.png" alt="1570870535646" style="zoom:50%;"><p>并且进入 <code>test</code> 博客正文还发现自动生成了版权声明信息，实在是太方便啦(⊙o⊙)</p><h3 id="7-3-优化首页链接"><a href="#7-3-优化首页链接" class="headerlink" title="7.3 优化首页链接"></a>7.3 优化首页链接</h3><p>我们可以在首页的右下角添加自己想要添加的链接或者图片</p><img src="/archives/118474ee/1570872425102.png" alt="1570872425102" style="zoom:67%;"><p>添加方式直接修改 <code>yilia</code> 目录下的 <code>_config.yml</code> 文件即可</p><img src="/archives/118474ee/1570872497627.png" alt="1570872497627" style="zoom:50%;"><p><code>微信</code>和 <code>qq</code> 图片直接放在 <code>blog/themes/yilia/source/assets</code> 目录下即可</p><p>然后重新部署启动即可</p><img src="/archives/118474ee/1570872635710.png" alt="1570872635710" style="zoom:50%;"><h3 id="7-4-添加博客置顶功能"><a href="#7-4-添加博客置顶功能" class="headerlink" title="7.4 添加博客置顶功能"></a>7.4 添加博客置顶功能</h3><p><a href="https://www.jianshu.com/p/a0afac70afc8" rel="external nofollow noopener noreferrer" target="_blank">参考博客</a></p><p>注意 top 后的数字，越小越会排在首页顶部</p><p>改进：我们把 top 这个属性写入默认模板</p><img src="/archives/118474ee/1570874902926.png" alt="1570874902926" style="zoom:67%;"><p>默认为1即可，那么我们每次新建的博客都会置顶</p><h3 id="7-5-添加打赏二维码"><a href="#7-5-添加打赏二维码" class="headerlink" title="7.5 添加打赏二维码"></a>7.5 添加打赏二维码</h3><p>可以通过支付宝和微信的收款二维码，来为自己的劳动成果收费 O(∩_∩)O</p><p>客官老爷行行好，赏小爷一杯咖啡喝喝吧 ╮(╯▽╰)╭</p><p>直接在 <code>yilia</code> 主题下的 <code>_config.yml</code> 文件修改</p><img src="/archives/118474ee/1570876450330.png" alt="1570876450330" style="zoom:50%;"><p>红圈改为自己的支付账号二维码即可～</p><p>显示效果如下：</p><img src="/archives/118474ee/1570876503233.png" alt="1570876503233" style="zoom:50%;">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/archives/118474ee/37518462a32b009479b18890c113e3da.jpg&quot; alt=&quot;37518462a32b009479b18890c113e3da&quot; style=&quot;zoom:100%;&quot;&gt;



&lt;p&gt;这应该是网上可以搜索到的最全的在 &lt;code&gt;Deepin&lt;/code&gt; 下搭建博客的教程了～&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术文" scheme="https://zc-cris.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87/"/>
    
      <category term="踩坑记录" scheme="https://zc-cris.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Deppin" scheme="https://zc-cris.github.io/tags/Deppin/"/>
    
      <category term="Hexo博客" scheme="https://zc-cris.github.io/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="yilia主题" scheme="https://zc-cris.github.io/tags/yilia%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zc-cris.github.io/archives/4a17b156.html"/>
    <id>https://zc-cris.github.io/archives/4a17b156.html</id>
    <published>2019-10-07T10:13:29.540Z</published>
    <updated>2019-10-12T04:58:33.884Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;! This is your very first post.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
